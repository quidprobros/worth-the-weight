<?PHP

/**

   OK, so i'm conflating things -- things and logs of things.

   I need a Goals table that defines the possible Goals.
   - Goals::class
   I also need a UserGoals table that records the goals of a user
   - UserGoals::class
   -- This is our pivot table ... many users can have same goal, many goals can have same user
   Then maybe a log for goals
   - UserGoalsLog


*/


exit;






use App\Controllers\{UserSettingsController, UserGoalsController};
use App\Validations\ValidatorStore;
use Respect\Validation\Validator as v;

$user = Flight::get("ActiveUser");
$goals = $user->goals;


$pg = App\Models\PointGoals::first();

s($user->goals->first()->point_goals()->count());
//s($pg->goal->id);
exit;


s($goals->count());
s($user->point_goals->first()->toArray());

exit;

s($user->id);
!d($user->exercises->first()->toArray());
exit;

/* $data = [
 *     'parentKey' => [
 *         'field1' => 'value1',
 *         'field2' => 'value2',
 *         '
 * 
 * try {
 * $re = v::key(
 *     'parentKey',
 *     v::key('field1', v::stringType())
 *     ->key('field2', v::stringType())
 *     ->key('field3', v::optional(v::alpha()))
 * )
 *     ->assert($data); // You can also use check() or validate()
 * 
 * s($re);
 * 
 * } catch (Exception $e) {
 *     s($e->getMessages());
 * }
 * 
 * 
 * 
 * 
 * exit;
 *  */



Flight::request()->data->setData(
    [
        'name' => '   x2!sally69 ',
        'plan-selection' => '123',
        'plan-points-goal' => ' 33.3zsaf'
    ]
);

$form = new UserGoalsController(Flight::request(), ValidatorStore::userGoalsValidator());


try {
    $isValid = $form->validate(1);
    !d($isValid);
} catch (Respect\Validation\Exceptions\Exception $e) {
    s($e->getMessage());
    !d($e);
}

exit;







exit;



$v = new App\Validations\UserSettingsFormValidator();

try {
    $v->rules->check([
        "shit" => 33
        // "plan-points-goal" => 'wer',
        //"plan-selection" => 2.0
    ]);
    //$v->planPointsRule->check("FSD");
} catch (Respect\Validation\Exceptions\NestedValidationException $e) {
    s($e->getMessage());
    !d($e);
} catch (Respect\Validation\Exceptions\ValidationException $e) {
    //    s($e->getMessage());
    !d($e);
} catch (Respect\Validation\Exceptions\Exception $e) {
    //    s($e->getMessage());
    !d($e);
} catch (\Exception $e) {
    !d($e);
}

exit;

// get user
$user = Flight::get("ActiveUser");

// foreach ($user->settings->get() as $sett) {
//     d($sett->toArray());
// }

d($user->settings->point_goals);


exit;

//s($user->id);
//exit;
// get settings from user
$settings = $user->settings;
!d($settings->toArray());
!d(Illuminate\Database\Capsule\Manager::getQueryLog());
//s($settings->getQuery()->toSql());

!d($settings->plan->toArray());
!d(Illuminate\Database\Capsule\Manager::getQueryLog());


exit;


foreach ((new App\Models\Plans())::get() as $plan) {
    s($plan->hasOneThrough(
        App\Models\User::class,
        App\Models\UserSettings::class,
        'plan_id', // Foreign key on the user_settings table...
        'id', // Foreign key on the user table...
        'id', // Local key on the plans table...
        'user_id' // Local key on the user_settings table...
    )->get()->toArray());
}



exit;
$v = new App\Validations\UserVitalsFormValidator();

$data = [
    'weight' => [
        'date' => '2022-02-02',
        'amount' => 33,
        'unit_id' => 1,
    ]
];

s($v->rules->validate($data));
s($v->rules->check($data));

exit;

$m = new App\Models\MeasurementUnits();

d($m->heights()->toArray());
exit;


$template = \Tamtamchik\SimpleFlash\TemplateFactory::create(\Tamtamchik\SimpleFlash\Templates::FOUNDATION);
$flash = new \Tamtamchik\SimpleFlash\Flash($template);

echo $flash
        ->error(['Invalid email!', 'Invalid username!'])
        ->warning('Warning message.')
        ->info('Info message.')
        ->success('Success message!')
        ->display();


?>

// Start a Session
if( !session_id() ) @session_start();

use \Tamtamchik\SimpleFlash\Flash;
use Tamtamchik\SimpleFlash\Templates;
use Tamtamchik\SimpleFlash\TemplateFactory;

// Instance
$template = TemplateFactory::create(Templates::FOUNDATION);
$flash = new Flash($template);

echo $flash
  ->error(['Invalid email!', 'Invalid username!'])
  ->warning('Warning message.')
  ->info('Info message.')
  ->success('Success message!')
  ->display();


// s(App\Enums\PlanSelection::GREEN);
//
//
//
// s(gethostname());
//
//
// exit;
//
// foreach ($plans::get() as $plan) {
//    s($plan->hasOneThrough(
//        App\Models\User::class,
//        App\Models\UserSettings::class,
//        'plan_id', // Foreign key on the user_settings table...
//        'id', // Foreign key on the user table...
//        'id', // Local key on the plans table...
//        'user_id' // Local key on the user_settings table...
//    )->toSql());
// }
//
/* $food_model = new App\Models\Food();
 *
 * s($user->today->toArray());;
 *
 * s($user->currentDailyPointsGoal->toArray());
 *
 *
 * s($food_model->first()->green_plan_points); */
