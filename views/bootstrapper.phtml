<?PHP

use Illuminate\Database\Capsule\Manager as Capsule;
use Tracy\Debugger;

function red($text) {
    $str = <<<HTML
<p style='color:red;'>{$text}</p>
HTML;
    return $str;
}

$default = [
    "dbname" => "wtw",
];

$custom = [];

$shouldContinue = (1 == Flight::request()->query['build']) ? true : false;

foreach (Flight::request()->query as $k => $v) {
    switch ($k) {
    case "dbname":
        if (false == ctype_alpha($v)) {
            echo red('dbname must be alphabetic, using default dbname "wtw"');
            break;
        }
        $custom['dbname'] = $v;
    }
}

$data = array_merge($default, $custom);

$root = FILE_ROOT;
$dbroot = $root . "/generated/db/";
$dbpathrel = "./generated/db/" . $data['dbname'] . ".db";
$dbpath = $dbroot . $data['dbname'] . ".db";

$_dbpathrel = "./generated/db/" . $default['dbname'] . ".db";

$dsn = "sqlite" . ":" . $dbpath;

if (true !== $shouldContinue) {
    echo <<<TXT
This script will create a sqlite database with the structures required to run this application.
<h1>Settings</h1>
<ul>
  <li>Project root is <strong>{$root}</strong></li>
  <li>The database will be saved as <strong>{$dbpathrel}</strong> (default: {$_dbpathrel})</li>
  <li>An existing database will <strong>not</strong> be overriden</li>
</ul>
<br>
<h1>Actions</h1>
<ul>
  <li>To continue, load this page again with <code>build=1</code> to the query string.</li>
  <li>To customize database name (not path), add <code>db=name</code> to the query string.</li>
</ul>
TXT;
}



try {

    $capsule = new Capsule();
    $capsule->addConnection([
        "driver" => App\DB_DRIVER,
        "database" => $dbpath,
    ], "migrate");

    $db = new PDO($dsn);
    echo "Opened connection to {$dsn}<br><br>";

    // import and execute script for auth users
    $auth_script = FILE_ROOT . '/vendor/delight-im/auth/Database/SQLite.sql';
    $sql = file_get_contents($auth_script);
    $db->exec($sql);


    // drop all tables and then create
    $capsule->getConnection('migrate')
            ->getSchemaBuilder()
            ->dropIfExists('exercise_records');
    echo "Dropped exercise_records table.<br><br>";

    $capsule->getConnection('migrate')
            ->getSchemaBuilder()
            ->dropIfExists('points_records');
    echo "Dropped points_records table.<br><br>";

    $capsule->getConnection('migrate')
            ->getSchemaBuilder()
            ->dropIfExists('food_records');
    echo "Dropped food_records table.<br><br>";

    $capsule->getConnection('migrate')
            ->getSchemaBuilder()
            ->create('exercise_records', function ($table) {
                $table->id();
                $table->integer("user_id");
                $table->foreign('user_id')->references("id")->on("users");
                $table->integer('exercised')->default(0);
                $table->date('date');
                $table->timestamps();
            });
    echo "Created exercise_records table.<br><br>";

    $capsule->getConnection('migrate')
            ->getSchemaBuilder()
            ->create('points_records', function ($table) {
                $table->id();
                $table->integer("user_id");
                $table->foreign('user_id')->references("id")->on("users");
                $table->integer("food_id");
                $table->foreign('food_id')->references("id")->on("food_records");
                $table->float('quantity')->default(0.0);
                $table->dateTime('date');
                $table->timestamps();
            });
    echo "Created points_records table.<br><br>";

    $r = $capsule->getConnection("migrate")
            ->getSchemaBuilder()
            ->create("food_records", function ($table) {
                $table->id();
                $table->string('food_name');
                $table->float('points');
                $table->timestamps();
            });
    echo "Created food_records table.<br><br>";
} catch (Exception $e) {
    Debugger::log($e->getMessage());
    s($e->getMessage());
}
